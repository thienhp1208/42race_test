//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `ic_arrow_right`.
    static let ic_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right")
    /// Image `ic_close_white`.
    static let ic_close_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_white")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close_white", bundle: ..., traitCollection: ...)`
    static func ic_close_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close_white, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `BusinessCell`.
    static let businessCell = _R.nib._BusinessCell()
    /// Nib `BusinessImageCollectionCell`.
    static let businessImageCollectionCell = _R.nib._BusinessImageCollectionCell()
    /// Nib `BusinessMainInfoCell`.
    static let businessMainInfoCell = _R.nib._BusinessMainInfoCell()
    /// Nib `BusinessMoreInfoCell`.
    static let businessMoreInfoCell = _R.nib._BusinessMoreInfoCell()
    /// Nib `BusinessOperationHourCell`.
    static let businessOperationHourCell = _R.nib._BusinessOperationHourCell()
    /// Nib `FilterCollectionViewCell`.
    static let filterCollectionViewCell = _R.nib._FilterCollectionViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BusinessCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.businessCell) instead")
    static func businessCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.businessCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BusinessImageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.businessImageCollectionCell) instead")
    static func businessImageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.businessImageCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BusinessMainInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.businessMainInfoCell) instead")
    static func businessMainInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.businessMainInfoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BusinessMoreInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.businessMoreInfoCell) instead")
    static func businessMoreInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.businessMoreInfoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BusinessOperationHourCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.businessOperationHourCell) instead")
    static func businessOperationHourCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.businessOperationHourCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilterCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterCollectionViewCell) instead")
    static func filterCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterCollectionViewCell)
    }
    #endif

    static func businessCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessCell? {
      return R.nib.businessCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessCell
    }

    static func businessImageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessImageCollectionCell? {
      return R.nib.businessImageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessImageCollectionCell
    }

    static func businessMainInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessMainInfoCell? {
      return R.nib.businessMainInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessMainInfoCell
    }

    static func businessMoreInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessMoreInfoCell? {
      return R.nib.businessMoreInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessMoreInfoCell
    }

    static func businessOperationHourCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessOperationHourCell? {
      return R.nib.businessOperationHourCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessOperationHourCell
    }

    static func filterCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterCollectionCell? {
      return R.nib.filterCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterCollectionCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `businessCell`.
    static let businessCell: Rswift.ReuseIdentifier<BusinessCell> = Rswift.ReuseIdentifier(identifier: "businessCell")
    /// Reuse identifier `businessImageCollectionCell`.
    static let businessImageCollectionCell: Rswift.ReuseIdentifier<BusinessImageCollectionCell> = Rswift.ReuseIdentifier(identifier: "businessImageCollectionCell")
    /// Reuse identifier `filterCollectionCell`.
    static let filterCollectionCell: Rswift.ReuseIdentifier<FilterCollectionCell> = Rswift.ReuseIdentifier(identifier: "filterCollectionCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BusinessMoreInfoCell.validate()
    }

    struct _BusinessCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BusinessCell

      let bundle = R.hostingBundle
      let identifier = "businessCell"
      let name = "BusinessCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessCell
      }

      fileprivate init() {}
    }

    struct _BusinessImageCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BusinessImageCollectionCell

      let bundle = R.hostingBundle
      let identifier = "businessImageCollectionCell"
      let name = "BusinessImageCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessImageCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessImageCollectionCell
      }

      fileprivate init() {}
    }

    struct _BusinessMainInfoCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BusinessMainInfoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessMainInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessMainInfoCell
      }

      fileprivate init() {}
    }

    struct _BusinessMoreInfoCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BusinessMoreInfoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessMoreInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessMoreInfoCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right' is used in nib 'BusinessMoreInfoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BusinessOperationHourCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BusinessOperationHourCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessOperationHourCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessOperationHourCell
      }

      fileprivate init() {}
    }

    struct _FilterCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FilterCollectionCell

      let bundle = R.hostingBundle
      let identifier = "filterCollectionCell"
      let name = "FilterCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterCollectionCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let businessDetailViewController = StoryboardViewControllerResource<BusinessDetailViewController>(identifier: "BusinessDetailViewController")
      let name = "Main"
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")

      func businessDetailViewController(_: Void = ()) -> BusinessDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: businessDetailViewController)
      }

      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_close_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().businessDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'businessDetailViewController' could not be loaded from storyboard 'Main' as 'BusinessDetailViewController'.") }
        if _R.storyboard.main().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Main' as 'SearchViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
